class Solution {
    public int maxProfit(int[] prices) {
        int left = 0;   // buy day
        int right = 1;  // sell day
        int maxProfit = 0;

        while (right < prices.length) {
            if (prices[right] > prices[left]) {
                // profitable transaction
                int profit = prices[right] - prices[left];
                maxProfit = Math.max(maxProfit, profit);
            } else {
                // found a cheaper buy price
                left = right;
            }
            right++;
        }

        return maxProfit;
    }
    public int maxProfit2(int[] prices) {
        int n = prices.length;
        int min = prices[0];
        int profit = 0;
        for(int i=1; i<n; i++){
            int cost = prices[i]-min;
            profit = Math.max(profit,cost);
            min = Math.min(min, prices[i]);
        }
        return profit;
    }
    public int maxProfit1(int[] prices) {
        int n = prices.length;
        int maxPro = 0; 
        for(int i=0; i<n; i++){
            for(int j=i+1; j<n; j++){
                if(prices[j]>prices[i]){
                    int profit = prices[j]-prices[i];
                    maxPro = Math.max(profit, maxPro);
                }
            }
        }
        return maxPro;
    }
}