class Solution {
    public int majorityElement(int[] nums) {
        int n = nums.length;
        int cnt = 0;
        int ele = 0;
        for(int i=0; i<n; i++){
            if(cnt==0){
                cnt=1;
                ele=nums[i];
            }
            else if(ele==nums[i]) cnt++;
            else cnt--;
        }
        int cnt1 = 0;
        for(int i=0; i<n; i++){
            if(nums[i]==ele) cnt1++;
        }
        if(cnt1>n/2) return ele;
        return -1;
    }
    public int majorityElement3(int[] nums) {
        int n = nums.length;
        Map<Integer, Integer> mpp = new HashMap<>();
        for(int i=0; i<n; i++){
            int value = mpp.getOrDefault(nums[i], 0);
            mpp.put(nums[i], value+1);
        }
        for(Map.Entry<Integer, Integer> entry : mpp.entrySet()){
            if(entry.getValue()>n/2){
                return entry.getKey();
            }
        }
        return -1;
    }
    public int majorityElement2(int[] nums) {
        int n = nums.length;
        for(int i=0; i<n; i++){
            int cnt = 0;
            for(int j=0; j<n; j++){
                if(nums[j]==nums[i]) cnt++;
            }
            if(cnt > n/2) return nums[i];
        }
        return -1;
    }
    public int majorityElement1(int[] nums) {
        Arrays.sort(nums);
        return nums[nums.length/2];
    }
}