class Solution {
    public int singleNumber(int[] nums) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int single : nums){
            map.put(single, map.getOrDefault(single,0)+1);
        }

        for(int single: nums){
            if(map.get(single)==1) return single;
        }
        return -1;
    }
    // hashing is only for positivr numbers
    public int singleNumber3(int[] nums) {
        int n = nums.length;
        int max = nums[0]; 
        for(int i=0; i<n; i++){
            max = Math.max(max, nums[i]);
        }
        int[] hash = new int[max+1];
        for(int i=0; i<n; i++){
            hash[nums[i]]++;
        }
        for(int i=0; i<n; i++){
            if(hash[nums[i]]==1) return nums[i];
        }
        return -1;
    }
    public int singleNumber2(int[] nums) {
        int n = nums.length;
        for(int i=0; i<n; i++){
            int temp = nums[i];
            int cnt = 0;
            for(int j=0; j<n; j++){
                if(nums[j]==temp) cnt++;
            }
            if(cnt==1) return temp;
        }
        return -1;
        
    }
    public int singleNumberoptimal(int[] nums) {
        int xor =0;
        for(int i=0; i<nums.length; i++){
            xor = xor^nums[i];
        }
        return xor;
    }
}